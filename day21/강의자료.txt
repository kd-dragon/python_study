NumPy("넘파이"라 읽는다)는 행렬이나 일반적으로 대규모 다차원 배열을 쉽게 처리 할 수 있도록 지원하는 파이썬의 라이브러리이다.

Numpy 쓰는 이유는 ????? 

List와 Array의 차이점
일반적으로 Python은 배열(array)을 지원하지 않습니다. 
일반적으로 착각하기 쉬운 부분으로 List와 Array는 정확히는 다른 것입니다.

Array는 정적 할당에 해당하며, List의 경우는 동적 할당에 해당합니다.
동적으로 계속 크기가 변할 수 있는 Python List와 달리 
NumPy Array는 고정된 크기를 갖습니다. 
Size를 변화하면 기존의 array를 삭제하고 새로운 array를 생성해야 합니다.

그렇다면 Array 의 장점은 무엇인가??? 

빠르다!!!
안에 있는 기본 코어가 C 기반으로 되어있어서 속도가 매우 빠르다
데이터가 많아질 수록 통상 10배 정도는 기본적으로 연산이 빠르다고 한다.

NumPy Array는 대량의 데이터에 대한 고급 수학적 및 기타 유형의 작업을 용이하게 합니다. 
일반적으로 Python의 기본 제공 기능을 사용하여 가능한 것보다 적은 코드로 보다 효율적으로 작업 수행할 수 있습니다. 
NumPy를 쓰는 메인 이유라고 할 수 있습니다.
------------------------------------------------------------------------------------------------------

pip install --upgrade numpy

import numpy as np
data = [[1,2,3],[4,5,6], [7,8,9]]
a= np.array(data)

1) 타입 확인해보기 (<class 'numpy.ndarray'>) 
print(type(a))

2) 배열 데이터 타입 확인하기 (속성)
print(a.dtype)
--> data = [[1,2,3.0],[4,5,6], [7,8,9]]
print(a.dtype)

3) 배열 데이터 타입 변경하기 
a = a.astype('float32')

4) 데이터 접근 및 찍어보기
print(a[0][1])
print(a[0])

5) 배열을 만드는 다양한 방법
// 1부터 10까지 2간격으로 배열 만든다
np.arange(1, 10 2)

6) 배열의 모양 찍어보기 
np.shape

// 배열의 모양을 바꿔준다 (단, 곱했을때 갯수가 맞아야 된다. ex) 3 x 3 = 9 => 1부터 10 까지 9
np.arange(1,10).reshape(3,3) 
np.arange(1, 13).reshape(3, 3) --> 에러 발생
np.arange(1, 13).reshape(3, 4) 에러 해결

// 3차원 이상 배열을 생각할때는 괄호의 갯수로 이해한다!!!
np.arange(1, 13).reshape(3, 2, 2)

===================================================================================

행렬 연산하기 
1) 각 원소들끼리의 계산

- 더하기
data = np.arange(1, 10).reshape(3, 3)
print(data + data)
#파이썬 리스트
print([1, 2, 3] + [4, 5, 6])

- 뺄셈, 나눗셈, 곱셈
data * data  등 


2) 행렬의 곱
np.dot(data, data)
또는 data@data

===================================================================
차원  (차원의 갯수는 앞에 대괄호의 갯수로 파악하면 됨!!!!)

1) 0 차원
a = np.array(1)
print(a)
print(a.shape)
print(a.ndim)

2) 1 차원 (벡터)
a = np.array([1])
print(a)
print(a.shape)
print(a.ndim)

(차원의 갯수는 앞에 대괄호의 갯수로 파악하면 됨!!!!)
3) 2 차원 ( 행렬, 메트릭스) 
a = np.array([[1,2,3],[4,5,6]])

4) 다차원 (3차원 이상) 은 Tensor 라고 부른다. 
a = np.array([[[1,2],[3,4],[5,6]],[[7,8],[9,10],[11,12]]])

텐서 플로우는 다차원 배열을 가지고 뭔가 연산을 해서 결과를 도출해내는 것을 말한다.
Tensor 와 DataFlow Graph를 따라 연산이 수행되는 형태(Flow)를 합쳐 TensorFlow 란 이름이 나오게 되었다.


