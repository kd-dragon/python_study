
여러가지 행렬만들기
a = np.arange(12).reshape(2,3,2)
b = np.ones(12).reshape(2,3,2)
c = np.zeros(12).reshape(2,3,2)
d = np.eye(3) // 단위 행렬. 자신과 곱했을 때 자신이 나오는 행렬
e = np.full((3,4, 1000) // 3x4 행렬인데 1000으로 다 채워라.


# 0부터 9까지 랜덤으로 초기화된 배열 만들기
array = np.random.randint(0, 10, (3, 3)) : 0부터 9까지 3x3배열 만들기



# Numpy 활용
1) Numpy 데이터의 파일 저장과 불러오기
- 단수
array = np.arange(0, 10)
np.save('saved.npy', array)
result = np.load('saved.npy')
print(result)
- 복수
x= np.arange(0, 10)
y = np.arange(10, 20)
np.savez('saved.npz', array1=x, array2=y)
data = np.load('saved.npz')
result1 = data['array1']
result2 = data['array2']



2) Numpy 균일한 간격으로 데이터 생성
array = np.linspace(0, 10, 5) : 0부터 10사이에 5개 만들기

3) Numpy 배열 객체 복사
array1 = np.arange(0 ,10)
array2 = array1
array2[0] = 99
print(array1)

array2 = array1.copy() //데이터 복사해서 담기


4) Numpy 중복된 원소 제거
array = np.array([1, 1, 2, 2, 2, 3, 3, 4])
print(np.unique(array) 



# 행렬 데이터 다루기
1) 평균값 
np.mean(a)
2) 중앙값
np.median(a) : 작은 수부터 큰 수까지 쭉 늘린다음 가운데 값 구함.

3) 표준편차
np.std(a)

4) 분산
np.var(a) 


* 편차에 대한 설명 -> 개별 데이터들이 평균으로부터 얼마나 흩어져 있는가???
* 그렇다면 편차의 평균을 구하면 되겠지????  ex) 160 170 180 190
* 그러나!! 편차의 합은 0이다..... 그렇다면 어떻게 편차의 평균을 구할 수 있을까??? 편차들을 제곱한다! 
* 이 편차들의 제곱의 평균이 바로 분산!!
따라서 분산은 확률변수의 흩어짐을 재는 척도로써
, 분산이 크면 변수들이 넓게 분포하고 있다는 것을 의미하며
, 분산이 작다는 것은 변수들이 조밀하게 분포하는 것을 의미합니다.

그러나 분산은 제곱을 해줘서 단위가 다르다. 예를 들면 키는 cm인데 제곱을 시켰으므로 단위도 제곱cm가 되버려서 정확한 단위가 아니다.
그래서 다시 제곱근을 씌여준 것이 표준 편차 !!! 아까 제곱했으니까 제곱근을 씌운다! 

표준편차 값이 5 라는 것의 의미는 데이터들이 평균 00 값에서 대략 5 정도 흩어져 있다는 것이다.
---> 이 값이 클수록 좋을까요 작을 수록 좋을까요?????
당연히 작을수록 좋습니다.  
표준편차가 크면 흩어짐이 커서 어떤 값을 규격내기 어렵다.

