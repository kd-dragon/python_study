# 이미지 프로세싱 기초

1) 관심영역
- 이미지에 어떤 연산을 적용해서 새로운 이미지나 정보를 얻어내려고 할 때
전체 이미지를 대상으로 연산하는 것보다 관심 있는 부분만 잘라내서 하는 것이 훨씬 효과적이다.

관심영역을 지정하기 위해 openCV C++ API 에서는 별도의 관련 API를 제공하는 데

우리가 사용하는 파이썬은 API 가 없다. 

그 이유는 NumPy 슬라이싱을 이용하면 따로 API 가 없어도 편하게 작업할 수 있기 때문.


1-2) Numpy 인덱싱과 슬라이싱

Numpy 배열은 파이썬의 리스트처럼 인덱스로 각 요소에 접근 할 수 있다.

[인덱싱]
import numpy as np

a = np.arange(10)
print(a)
print(a[5])

b = np.arange(12).reshape(3,4)
print(b)
print(b[0])
print(b[0][3])

# 배열 a는 1차원 배열 b는 2차원. 
  이때 2차원인 배열 b에 1개의 인덱스만 사용하면 1개의 행 모두가 선택된다.
  2차원 일때는 인덱스 2개를 사용해서 열과 행을 지정해야 1개의 요소를 선택할 수 있다.

========================================================
난이도 UP)
b[0] = 0
print(b)
어떻게될까????

-> 인덱스를 적게 지정해서 행 단위로 지정하면 *브로드캐스팅 연산이 일어나서 해당 단위 모두를 같은 값으로 변경한다.

# 브로드 캐스팅 연산이란?!
https://sacko.tistory.com/16

정리하면,
브로드캐스팅(Broadcasting)은 모양이 다른 배열들 간의 연산이 "어떤 조건을 만족했을 때" 
가능해지도록 배열을 자동적으로 변환하는 것이라고 정의할 수 있다. 
그리고 누락되었거나 길이가 1인 차원에 대해 브로드캐스팅이 수행된다.

브로드캐스팅이 일어날 수 있는 조건은 다음과 같다.
1. 배열과 스칼라값 계산
2. 차원의 크기가 1일때 가능하다
   -> 두 배열 간의 연산에서 최소한 하나의 배열의 차원이 1이라면 (0번 축이든 1번 축이든; 1행이든 1열이든) 가능하다.
3. 차원의 짝이 맞을 때 가능하다
   -> 차원에 대해 축의 길이가 동일하면 브로드캐스팅이 가능하다.

=====================================================================

[슬라이싱]
인덱스 자리에 콜론(:) 을 이용해서 범위를 지정하면 슬라이싱을 할 수 있다
이때 범위의 끝 인덱스는 슬라이싱 결과에 포함되지 않는다. 
시작과 끝 인덱스를 각각 생략하면 처음부터 끝까지라는 의미.

print(a[2:5])
print(a[5:])
print(a[:])

print(b[0:2, 1])
print(b[0:2, 1:3])

# b[0:2, 1] 은 배열 b 배열 0~1 행의 1열 요소를 의미
# b[0:2, 1:3] 은 b 배열 0~1 행의 1~2열 요소 의미

파이썬 기본형인 리스트와 가장 큰 차이점은 슬라이싱의 결과가 복제본이 아닌 원본!
슬라이싱으로 전체 배열 중 일부를 다른 변수에 할당하는 경우 별도의 배열로 착각하는 경우가 많지만
슬라이싱 해당 영엉에 대한 참조일 뿐 값의 변경은 원본에도 반영된다.

실제로 리스트 처럼 복사본을 얻고 싶다면 ndarray.copy() 함수로 아에 복사를 해야한다.


2) 관심영역 실습

전체 이미지가 img 라는 변수에 있을 때 
관심 있는 영역의 좌표가 x, y 이고 영역의 넓이 w 높이 h 라고 하면 이것을 이용하여 관심영역을 지정하는 코드는 다음과 같다.

zoom = img[y:y+h, x:x+w]

*주의사항: 개발자들은 그림이나 도형을 코드로 표현할 때 폭(width), 높이(height) 순으로 하는 경향이 있다. 
 	하지만 Numpy 배열은 행(row), 열(column) 순으로 접근하므로 반드시 높이(height), 폭(width) 순으로 지정해야한다!! 

import numpy as np
import cv2
img = cv2.imread('test.jpg')

x=440
y=103
w=80
h=80

box = img[y:y+h, x:x+w]

print(box.shape)
cv2.rectangle(box, (0,0), (h-1, w-1), (0,255,0))
cv2.imshow("img", img)

key = cv2.waitKey(0)
cv2.destroyAllWindows()

========================= 관심영역 복제 및 새창 띄우기 =================================

import cv2
import numpy as np

img = cv2.imread('test.jpg')

x=440
y=103
w=80
h=80

box = img[y:y+h, x:x+w]

# 이미지 복제해보기
img[y:y+h, x+w:x+w+w] = box
cv2.rectangle(img, (x,y), (x+w+w, y+h), (0,255,0))

cv2.imshow("img", img)

# 카피
# img2 = box.copy()
# cv2.imshow("box", img2)

cv2.waitKey(0)
cv2.destroyAllWindows()

