
인공지능의 큰 범주 안에 머신러닝이 속하고, 머신러닝의 일부분이 딥러닝인 것입니다.
딥러닝을 배우려면 반드시 머신러닝의 기초 개념을 알아야합니다.

머신러닝의 학습 방법은 크게 3가지로 나뉩니다.
지도학습, 비지도학습, 강화학습

1. 지도학습
지도학습은 정답이 있는 데이터를 활용하여 데이터를 학습 시키는 것
ex) 분류, 회귀 등 
분류 (Classification): 필기체, 이미지, 자연어 등 (카테고리 예측)
 1) 이진 분류 : True, False
 2) 다중 분류 : 토끼, 다람쥐, 돼지 등 여러개
 
회귀 (Regression): 정량적인 데이터 (수치 예측)
-> 어떤 데이터의 특성을 기준으로 연속된 값을 예측

2. 비지도 학습
정답이 없는 데이터를 비슷한 특징끼리 군집화하여 새로운 데이터에 대한 결과를 예측
(지도 학습보다 난이도 높음)
- 추천 상품, 메뉴를 알려주는 제안 사항으로 이용 
- 군집화 (Clustering): 개체들이 주어져있을 때, 개체들을 몇개의 부분 그룹으로 나누는 과정

3. 강화 학습
기계 학습의 한 영역이며 행동 심리학에서 영감을 받음
어떤 보상을 주는 환경에서 정의된 에이전트가 현재 상태를 인식하여
선택 가능한 행동들 중 보상을 최대화하는 행동 순서를 선택하는 방법
- 바둑, 장기 알파고 및 로봇 조작 제어에서 주로 사용.

=====================================================================

딥러닝을 만들고 작동시키는 방법에는 크게 2가지가 있습니다. 
1) 자신의 컴퓨터에 필요한 프로그램 설치
장점: 데이터 잃어버릴 걱정 없이 딥러닝 코딩을 할 수 있다.
단점: 환경 세팅을 해야한다.

2) 구글 코랩을 이용하는 방법
구글코랩: 파이썬 개발에 쓰이는 주피터 노트북 환경을 구글 클라우드에 마련해 놓은 것
장점: 구글 프로세서를 이용해 빠르고 쉽게 딥러닝 코드를 테스트 할 수 있다.
단점: 내 컴퓨터가 아니므로 원하는 버전의 패키지를 매번 설치해야하고, 작업 중이던 데이터를 잃어버릴 수 있다.


[딥러닝 프레임워크 종류]
프레임워크란? "애플리케이션 개발에 바탕이 되는 템플릿과 같은 역활을 하는 클래스들과 인터페이스의 집합"

딥러닝 프레임워크(framework)는 이렇게 이미 검증된 수많은 라이브러리와 사전 학습까지 완료된 
다양한 딥러닝 알고리즘을 제공함으로써, 개발자가 이를 빠르고 손쉽게 사용할 수 있도록 해줍니다. 
이를 통해 중복적인 기능을 구현해야 하는 소모적인 작업으로부터 개발자를 해방시켜, 
문제 해결을 위한 핵심 알고리즘 개발에만 집중할 수 있도록 도와줍니다.


현재 가장 인기 있는 대표적인 딥러닝 프레임워크는 다음과 같습니다.

1. 테아노(Theano)
2. 텐서플로우(Tensorflow)
3. 토치(Torch)
4. DL4J(DeepLearning4J)
5. 케라스

"케라스":
Theano와 Tensorflow는 매우 훌륭한 딥러닝 라이브러리이지만 직접 사용하여 모델을 만드는 것은 매우 저급 수준이기 때문에 어려울 수 있습니다.
이러한 문제를 해결하기 위해  Keras는 효율적인 신경망 구축을 위한 단순화 된 인터페이스로 개발되었습니다. 
케라스는 텐서플로우, CNTK, 테아노(Theano)의 세 가지 백엔드 딥 러닝 프레임워크를 기본적으로 지원한다. 
Python으로 작성되었으며, 매우 가볍고 배우기 쉽습니다. 
비교적 새로운 라이브러리임에도 불구하고 아주 좋은 문서를 가지고 있으며 몇 줄의 코드에서 
Keras를 사용하여 신경망을 만들 수 있습니다.

"파이토치가 텐서플로우를 이겼다, 2020 AI현황보고서 8대 전망"
http://www.aitimes.com/news/articleView.html?idxno=132756
"텐서플로우에서 파이토치로 바꾼 3개 기업의 이유 있는 전환"
https://www.itworld.co.kr/news/174729


=================================================================================
아나콘다 설치
https://www.anaconda.com/products/individual

아나콘다는 파이썬과 우리가 사용해야하는 여러 패키지 들을 모아놓은 개발 플랫폼입니다.

예제1) "기존 환자의 데이터를 이요해 새로운 환자의 생사를 예측하는 프로그램"

이렇게 패턴이 분석되는 과정을 "학습(training)" 이라고 부릅ㄴ디ㅏ.
예를 들어 환자들의 분포를 그래프 위에 펼쳐 놓고
이 분포도 위에 생존과 사망 여부를 구분 짓는 경계를 그려넣습니다.
이를 잘 저장해 놓았다가 새로운 환자가 오면 분포도를 다시 꺼내서 
새 환자가 분포도의 어디쯤 위치하는 지를 정합니다.

머신러닝의 예측 성공률을 결국 얼마나 정확한 경계선을 긋느냐에 달려 있습니다.
1950년대부터 학자들이 더 정확한 선을 긋고자 여러가지 방법을 고안하였습니다.

- 폐암 수술환자의 생존율 예측하기
loss: 손실값 - 예측에서 빗나간 정도
accuracy: 정확도 - 예측이 성공할 확률

Sequential(): 딥러닝의 구조를 한 층 한 층 쉽게 쌓아올릴 수 있게 해주는 것
 - Sequential()을 선언한 뒤에 model.add() 함수를 사용해 필요한 층을 차례로 추가하는 것.
 
 
Dense(): (dense 뜻: '조밀하게 모여있는 집합') 각 층이 제각각 어떤 특성을 가질지 옵션을 설정하는 역할

딥러닝의 구조와 층별 옵션을 정하고 나면 compile() 함수를 이용해 이를 실행시킵니다.

activation: 다음 층으로 어떻게 값을 넘길지 결정하는 부분, 여기서는 가장 많이 사용되는 relu()와 sigmoid() 함수를 사용하게끔 지정
loss: 한번 신경망이 실행될 때마다 오차 값을 추적하는 함수
optimizer: 오차를 어떻게 줄여 나갈지 정하는 함수
epochs(에포크): 전체 데이터 셋을 몇 번 반복 학습할지 설정 (1 Epoch: 모든 데이터 셋을 1번 학습)
batch_size: 몇 개의 샘플로 가중치를 갱신할 것인지 설정




